Class {
	#name : #MyOCASTTranslator,
	#superclass : #OCASTTranslator,
	#category : #'ReflexiveAST-API'
}

{ #category : #'visitor-double dispatching' }
MyOCASTTranslator >> visitMethodNode: aMethodNode [
	
	aMethodNode arguments size > 15 ifTrue: [self backendError: 'Too many arguments' forNode: aMethodNode ].

	methodBuilder compilationContext: aMethodNode compilationContext.
	methodBuilder addTemps: aMethodNode scope tempVarNames.
		
	methodBuilder properties: aMethodNode methodProperties.
	methodBuilder irPrimitive: aMethodNode primitiveFromPragma.
	aMethodNode pragmas do: [:each | self visitPragmaNode: each].
	methodBuilder numArgs: aMethodNode arguments size.
	
	aMethodNode scope tempVector ifNotEmpty: [
		methodBuilder 
			createTempVectorNamed: aMethodNode scope tempVectorName 
			withVars: (aMethodNode scope tempVector collect: [:each| each name]) asArray.
	].
	aMethodNode statements do: [ :each | effectTranslator visitNode: each ].
	"effectTranslator visitNode: aMethodNode body."
	"aMethodNode body lastIsReturn ifFalse:  [methodBuilder pushReceiver; returnTop]"
	aMethodNode lastIsReturn ifFalse:  [methodBuilder pushReceiver; returnTop]
]

{ #category : #'visitor-double dispatching' }
MyOCASTTranslator >> visitReturn: aNode [
	^ self visitReturnNode: aNode
]
